# coding: utf-8
#
# handlers for atxslave
#

import json

from logzero import logger

from ..database import db
from .base import BaseRequestHandler, BaseWebSocketHandler


class SlaveHeartbeatWSHandler(BaseWebSocketHandler):
    """ monitor device online or offline """

    def open(self):
        """
        id: xxxx,
        name: xxxx,
        bindAddress: "10.0.0.1:6477",
        """
        logger.info("new websocket connected: %s", self.request.remote_ip)
        pass

    async def _on_ping(self, req):
        """
        {"command": "ping"}
        """
        self.write_message("pong")

    async def _on_handshake(self, req):
        """
        token means the device belong to which team.
        the team may have many people.
        # email 
        id is generated by slave

        {"command": "handshake",
         "id": "ccddqq",
         "token": "3377_121ffz319"}
        """
        self.write_message("you are online " + req['id'])

    async def _on_update(self, req):
        """
        {"command": "update", "devices": [
            {"udid": "1232412312", "present": true}
        ]}
        """
        for device in req['devices']:
            print("D:", device)
            id = await db.device.save(device)
            self.write_message(json.dumps({"id": id}))
            print("Device ID", id)

    async def on_message(self, message):
        req = json.loads(message)
        assert 'command' in req

        await getattr(self, "_on_"+req["command"])(req)

        """
        {"command": "ping"} // ping, update
        
        // command: "updateDevices", data: []

        devices: [{
            "udid": "xxxxsdfasdf",
            "present": true,
        }, {
            "udid": "xxlksjdfljsf",
            "properties": {
                "version": "1.2.0",
            },
            "present": false,
        }]
        """
        logger.info("receive message: %s", message)

    def on_close(self):
        logger.info("websocket closed: %s", self.request.remote_ip)
        pass
